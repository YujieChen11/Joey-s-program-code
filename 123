import pandas as pd
import matplotlib.pyplot as plt
from rdp import rdp

# Step1: 讀取AIS資料
file_path = r'D:\114畢業專題\1.3_DataCleaning_Final\1 min\Total_AIS_CleanData.csv'
ais_data = pd.read_csv(file_path, low_memory=False, encoding='utf-8')

# Step2: 定義壓縮函數
def compress_trajectory(traj):
    
    # 提取經緯度座標
    lons = traj['Longitude'].tolist()
    lats = traj['Latitude'].tolist()
    
    # 使用Douglas-Peuker算法壓縮軌跡
    compressed_points = rdp(list(zip(lons, lats)), epsilon=0.0001)
    
    # 將壓縮後的座標轉換為DataFrame
    compressed_traj = pd.DataFrame(compressed_points, columns=['Longitude', 'Latitude'])
    
    # 保留原始資料中的其他欄位（取第一行的值）
    first_row = traj.iloc[0]
    
    # 將壓縮後的座標與第一行的其他欄位合併
    compressed_traj['MMSI'] = first_row['MMSI']
    compressed_traj['ShipName'] = first_row['ShipName']
    compressed_traj['COG'] = first_row['COG']
    compressed_traj['Ship_and_Cargo_Type'] = first_row['Ship_and_Cargo_Type']
    compressed_traj['SOG'] = first_row['SOG']
    compressed_traj['Record_Time'] = first_row['Record_Time']
    
    return compressed_traj

# 對每艘船的軌跡進行壓縮
compressed_data = ais_data.groupby('MMSI').apply(compress_trajectory).reset_index(drop=True)

# 輸出壓縮後的資料為CSV檔
output_path = r'D:\114畢業專題\2_DPalgorithm\DPalgorithm_1min_trajectories.csv'
compressed_data.to_csv(output_path, index=False, encoding='utf-8')

#-------------------------------------------------------------------------------------------------------

#Visualize trajectories
# 繪製原始軌跡
plt.figure(figsize=(10, 6))
for mmsi, group in ais_data.groupby('MMSI'):
    plt.plot(group['Longitude'], group['Latitude'], label=f'Original Trajectory {mmsi}')

# 繪製壓縮後的軌跡
for mmsi, compressed_group in compressed_data.groupby('MMSI'):
    plt.plot(compressed_group['Longitude'], compressed_group['Latitude'], label=f'Compressed Trajectory {mmsi}', linestyle='--')

plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('AIS Trajectories: Original vs Compressed')
plt.legend()
plt.show()
